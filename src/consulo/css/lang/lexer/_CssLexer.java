/* The following code was generated by JFlex 1.4.4 on 8/19/17 7:09 PM */

package consulo.css.lang.lexer;

import com.intellij.lexer.LexerBase;
import com.intellij.psi.tree.IElementType;
import consulo.css.lang.CssTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.4
 * on 8/19/17 7:09 PM from the specification file
 * <tt>W:/_github.com/consulo/consulo-css/src/consulo/css/lang/lexer/_CssLexer.flex</tt>
 */
public class _CssLexer extends LexerBase {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int URI = 4;
  public static final int YYINITIAL = 0;
  public static final int BODY = 2;
  public static final int URI_BODY = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\2\1\0\1\4\1\1\16\11\4\0\1\3\1\45"+
    "\1\12\1\27\1\10\1\26\1\0\1\13\1\31\1\33\1\7\1\43"+
    "\1\32\1\11\1\15\1\6\12\14\1\40\1\44\1\0\1\41\1\42"+
    "\2\0\6\30\24\10\1\36\1\5\1\37\1\0\1\30\1\0\1\50"+
    "\1\30\1\20\1\30\1\25\1\30\2\10\1\16\3\10\1\21\1\17"+
    "\1\46\1\22\1\10\1\47\1\10\1\23\3\10\1\24\2\10\1\34"+
    "\1\0\1\35\1\0\41\11\2\0\4\10\4\0\1\10\2\0\1\11"+
    "\7\0\1\10\4\0\1\10\5\0\27\10\1\0\37\10\1\0\u01ca\10"+
    "\4\0\14\10\16\0\5\10\7\0\1\10\1\0\1\10\21\0\160\11"+
    "\5\10\1\0\2\10\2\0\4\10\10\0\1\10\1\0\3\10\1\0"+
    "\1\10\1\0\24\10\1\0\123\10\1\0\213\10\1\0\5\11\2\0"+
    "\236\10\11\0\46\10\2\0\1\10\7\0\47\10\7\0\1\10\1\0"+
    "\55\11\1\0\1\11\1\0\2\11\1\0\2\11\1\0\1\11\10\0"+
    "\33\10\5\0\3\10\15\0\5\11\6\0\1\10\4\0\13\11\5\0"+
    "\53\10\37\11\4\0\2\10\1\11\143\10\1\0\1\10\10\11\1\0"+
    "\6\11\2\10\2\11\1\0\4\11\2\10\12\11\3\10\2\0\1\10"+
    "\17\0\1\11\1\10\1\11\36\10\33\11\2\0\131\10\13\11\1\10"+
    "\16\0\12\11\41\10\11\11\2\10\4\0\1\10\5\0\26\10\4\11"+
    "\1\10\11\11\1\10\3\11\1\10\5\11\22\0\31\10\3\11\104\0"+
    "\1\10\1\0\13\10\67\0\33\11\1\0\4\11\66\10\3\11\1\10"+
    "\22\11\1\10\7\11\12\10\2\11\2\0\12\11\1\0\7\10\1\0"+
    "\7\10\1\0\3\11\1\0\10\10\2\0\2\10\2\0\26\10\1\0"+
    "\7\10\1\0\1\10\3\0\4\10\2\0\1\11\1\10\7\11\2\0"+
    "\2\11\2\0\3\11\1\10\10\0\1\11\4\0\2\10\1\0\3\10"+
    "\2\11\2\0\12\11\4\10\7\0\1\10\5\0\3\11\1\0\6\10"+
    "\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10"+
    "\1\0\2\10\2\0\1\11\1\0\5\11\4\0\2\11\2\0\3\11"+
    "\3\0\1\11\7\0\4\10\1\0\1\10\7\0\14\11\3\10\1\11"+
    "\13\0\3\11\1\0\11\10\1\0\3\10\1\0\26\10\1\0\7\10"+
    "\1\0\2\10\1\0\5\10\2\0\1\11\1\10\10\11\1\0\3\11"+
    "\1\0\3\11\2\0\1\10\17\0\2\10\2\11\2\0\12\11\1\0"+
    "\1\10\17\0\3\11\1\0\10\10\2\0\2\10\2\0\26\10\1\0"+
    "\7\10\1\0\2\10\1\0\5\10\2\0\1\11\1\10\7\11\2\0"+
    "\2\11\2\0\3\11\10\0\2\11\4\0\2\10\1\0\3\10\2\11"+
    "\2\0\12\11\1\0\1\10\20\0\1\11\1\10\1\0\6\10\3\0"+
    "\3\10\1\0\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0"+
    "\2\10\3\0\3\10\3\0\14\10\4\0\5\11\3\0\3\11\1\0"+
    "\4\11\2\0\1\10\6\0\1\11\16\0\12\11\11\0\1\10\7\0"+
    "\3\11\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0"+
    "\5\10\3\0\1\10\7\11\1\0\3\11\1\0\4\11\7\0\2\11"+
    "\1\0\2\10\6\0\2\10\2\11\2\0\12\11\22\0\2\11\1\0"+
    "\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10\2\0"+
    "\1\11\1\10\7\11\1\0\3\11\1\0\4\11\7\0\2\11\7\0"+
    "\1\10\1\0\2\10\2\11\2\0\12\11\1\0\2\10\17\0\2\11"+
    "\1\0\10\10\1\0\3\10\1\0\51\10\2\0\1\10\7\11\1\0"+
    "\3\11\1\0\4\11\1\10\10\0\1\11\10\0\2\10\2\11\2\0"+
    "\12\11\12\0\6\10\2\0\2\11\1\0\22\10\3\0\30\10\1\0"+
    "\11\10\1\0\1\10\2\0\7\10\3\0\1\11\4\0\6\11\1\0"+
    "\1\11\1\0\10\11\22\0\2\11\15\0\60\10\1\11\2\10\7\11"+
    "\4\0\10\10\10\11\1\0\12\11\47\0\2\10\1\0\1\10\2\0"+
    "\2\10\1\0\1\10\2\0\1\10\6\0\4\10\1\0\7\10\1\0"+
    "\3\10\1\0\1\10\1\0\1\10\2\0\2\10\1\0\4\10\1\11"+
    "\2\10\6\11\1\0\2\11\1\10\2\0\5\10\1\0\1\10\1\0"+
    "\6\11\2\0\12\11\2\0\4\10\40\0\1\10\27\0\2\11\6\0"+
    "\12\11\13\0\1\11\1\0\1\11\1\0\1\11\4\0\2\11\10\10"+
    "\1\0\44\10\4\0\24\11\1\0\2\11\5\10\13\11\1\0\44\11"+
    "\11\0\1\11\71\0\53\10\24\11\1\10\12\11\6\0\6\10\4\11"+
    "\4\10\3\11\1\10\3\11\2\10\7\11\3\10\4\11\15\10\14\11"+
    "\1\10\17\11\2\0\46\10\1\0\1\10\5\0\1\10\2\0\53\10"+
    "\1\0\u014d\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10"+
    "\2\0\51\10\1\0\4\10\2\0\41\10\1\0\4\10\2\0\7\10"+
    "\1\0\1\10\1\0\4\10\2\0\17\10\1\0\71\10\1\0\4\10"+
    "\2\0\103\10\2\0\3\11\40\0\20\10\20\0\125\10\14\0\u026c\10"+
    "\2\0\21\10\1\0\32\10\5\0\113\10\3\0\3\10\17\0\15\10"+
    "\1\0\4\10\3\11\13\0\22\10\3\11\13\0\22\10\2\11\14\0"+
    "\15\10\1\0\3\10\1\0\2\11\14\0\64\10\40\11\3\0\1\10"+
    "\3\0\2\10\1\11\2\0\12\11\41\0\3\11\2\0\12\11\6\0"+
    "\130\10\10\0\51\10\1\11\1\10\5\0\106\10\12\0\35\10\3\0"+
    "\14\11\4\0\14\11\12\0\12\11\36\10\2\0\5\10\13\0\54\10"+
    "\4\0\21\11\7\10\2\11\6\0\12\11\46\0\27\10\5\11\4\0"+
    "\65\10\12\11\1\0\35\11\2\0\13\11\6\0\12\11\15\0\1\10"+
    "\130\0\5\11\57\10\21\11\7\10\4\0\12\11\21\0\11\11\14\0"+
    "\3\11\36\10\15\11\2\10\12\11\54\10\16\11\14\0\44\10\24\11"+
    "\10\0\12\11\3\0\3\10\12\11\44\10\122\0\3\11\1\0\25\11"+
    "\4\10\1\11\4\10\3\11\2\10\11\0\300\10\47\11\25\0\4\11"+
    "\u0116\10\2\0\6\10\2\0\46\10\2\0\6\10\2\0\10\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\37\10\2\0\65\10\1\0"+
    "\7\10\1\0\1\10\3\0\3\10\1\0\7\10\3\0\4\10\2\0"+
    "\6\10\4\0\15\10\5\0\3\10\1\0\7\10\16\0\5\11\32\0"+
    "\5\11\20\0\2\10\23\0\1\10\13\0\5\11\5\0\6\11\1\0"+
    "\1\10\15\0\1\10\20\0\15\10\3\0\33\10\25\0\15\11\4\0"+
    "\1\11\3\0\14\11\21\0\1\10\4\0\1\10\2\0\12\10\1\0"+
    "\1\10\3\0\5\10\6\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\4\10\1\0\13\10\2\0\4\10\5\0\5\10\4\0\1\10\21\0"+
    "\51\10\u0a77\0\57\10\1\0\57\10\1\0\205\10\6\0\4\10\3\11"+
    "\2\10\14\0\46\10\1\0\1\10\5\0\1\10\2\0\70\10\7\0"+
    "\1\10\17\0\1\11\27\10\11\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\40\11\57\0\1\10\u01d5\0\3\10\31\0\11\10\6\11\1\0"+
    "\5\10\2\0\5\10\4\0\126\10\2\0\2\11\2\0\3\10\1\0"+
    "\132\10\1\0\4\10\5\0\51\10\3\0\136\10\21\0\33\10\65\0"+
    "\20\10\u0200\0\u19b6\10\112\0\u51cd\10\63\0\u048d\10\103\0\56\10\2\0"+
    "\u010d\10\3\0\20\10\12\11\2\10\24\0\57\10\1\11\4\0\12\11"+
    "\1\0\31\10\7\0\1\11\120\10\2\11\45\0\11\10\2\0\147\10"+
    "\2\0\4\10\1\0\4\10\14\0\13\10\115\0\12\10\1\11\3\10"+
    "\1\11\4\10\1\11\27\10\5\11\20\0\1\10\7\0\64\10\14\0"+
    "\2\11\62\10\21\11\13\0\12\11\6\0\22\11\6\10\3\0\1\10"+
    "\4\0\12\11\34\10\10\11\2\0\27\10\15\11\14\0\35\10\3\0"+
    "\4\11\57\10\16\11\16\0\1\10\12\11\46\0\51\10\16\11\11\0"+
    "\3\10\1\11\10\10\2\11\2\0\12\11\6\0\27\10\3\0\1\10"+
    "\1\11\4\0\60\10\1\11\1\10\3\11\2\10\2\11\5\10\2\11"+
    "\1\10\1\11\1\10\30\0\3\10\2\0\13\10\5\11\2\0\3\10"+
    "\2\11\12\0\6\10\2\0\6\10\2\0\6\10\11\0\7\10\1\0"+
    "\7\10\221\0\43\10\10\11\1\0\2\11\2\0\12\11\6\0\u2ba4\10"+
    "\14\0\27\10\4\0\61\10\u2104\0\u016e\10\2\0\152\10\46\0\7\10"+
    "\14\0\5\10\5\0\1\10\1\11\12\10\1\0\15\10\1\0\5\10"+
    "\1\0\1\10\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10"+
    "\22\0\100\10\2\0\66\10\50\0\15\10\3\0\20\11\20\0\7\11"+
    "\14\0\2\10\30\0\3\10\31\0\1\10\6\0\5\10\1\0\207\10"+
    "\2\0\1\11\4\0\1\10\13\0\12\11\7\0\32\10\4\0\1\10"+
    "\1\0\32\10\13\0\131\10\3\0\6\10\2\0\6\10\2\0\6\10"+
    "\2\0\3\10\3\0\2\10\3\0\2\10\22\0\3\11\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\2\1\0\1\3\1\4\1\3\1\5\1\1"+
    "\2\3\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\1\1\21\1\6\1\22"+
    "\1\7\1\3\1\23\1\24\1\25\1\3\1\2\1\26"+
    "\3\27\1\30\1\31\2\0\1\32\2\0\1\33\2\0"+
    "\4\1\3\21\1\34\3\0\1\31\2\32\1\21\13\0"+
    "\1\31\15\0\1\35\1\0\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\244"+
    "\0\u011f\0\u0148\0\u0171\0\244\0\244\0\244\0\244\0\244"+
    "\0\244\0\244\0\u019a\0\244\0\244\0\244\0\u01c3\0\u01ec"+
    "\0\u0215\0\244\0\u023e\0\u0267\0\244\0\244\0\244\0\u0290"+
    "\0\u02b9\0\244\0\244\0\u0148\0\u0171\0\244\0\u02e2\0\u0148"+
    "\0\u030b\0\244\0\u0171\0\u0334\0\244\0\u0267\0\u0215\0\u035d"+
    "\0\u0386\0\u03af\0\u03d8\0\244\0\u0401\0\u023e\0\u0267\0\u042a"+
    "\0\u0453\0\u047c\0\u04a5\0\u0148\0\u0171\0\u011f\0\u04ce\0\u04f7"+
    "\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f"+
    "\0\u0668\0\244\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e"+
    "\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d\0\244"+
    "\0\u08a6\0\u05ed";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\4\6\1\5\1\7\1\10\2\11\1\12\1\13"+
    "\1\11\1\14\10\11\1\5\1\15\1\11\1\5\1\16"+
    "\1\5\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\5\3\11\1\5\4\6\1\5\1\7\1\10"+
    "\1\27\1\11\1\12\1\13\1\30\1\31\10\27\1\32"+
    "\1\33\1\27\1\34\1\16\1\5\1\35\1\36\1\21"+
    "\1\22\1\23\1\24\1\5\1\26\1\37\1\40\3\27"+
    "\2\5\1\0\5\5\1\41\5\5\10\41\2\5\1\41"+
    "\1\42\14\5\3\41\2\43\1\0\7\43\1\44\1\45"+
    "\16\43\1\16\1\46\15\43\52\0\4\6\53\0\1\47"+
    "\51\0\2\11\2\0\1\11\1\0\10\11\2\0\1\11"+
    "\15\0\3\11\1\50\2\0\2\50\1\51\4\50\1\52"+
    "\36\50\1\53\2\0\2\53\1\54\5\53\1\52\35\53"+
    "\40\0\1\55\20\0\1\27\1\11\2\0\1\11\1\0"+
    "\10\27\2\0\1\27\1\56\14\0\3\27\10\0\2\11"+
    "\2\0\1\30\1\57\1\60\1\11\2\61\1\62\2\11"+
    "\1\63\1\64\1\0\1\11\15\0\3\11\14\0\1\65"+
    "\50\0\1\66\3\0\1\66\4\0\1\66\2\0\1\66"+
    "\17\0\1\66\2\56\1\0\30\56\1\67\15\56\3\0"+
    "\1\70\2\0\1\71\7\0\1\72\42\0\1\41\5\0"+
    "\10\41\2\0\1\41\15\0\3\41\51\73\1\50\2\0"+
    "\2\50\1\51\4\50\1\74\36\50\1\53\2\0\2\53"+
    "\1\54\5\53\1\75\35\53\10\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\76\6\11\2\0\1\11\15\0\3\11"+
    "\10\0\2\11\2\0\1\11\1\0\3\11\1\76\4\11"+
    "\2\0\1\11\15\0\3\11\10\0\2\11\2\0\1\11"+
    "\1\0\2\11\1\76\2\11\2\76\1\11\2\0\1\11"+
    "\15\0\3\11\10\0\2\11\2\0\1\11\1\0\3\11"+
    "\1\76\2\11\1\76\1\11\2\0\1\11\15\0\3\11"+
    "\14\0\1\65\1\0\1\77\1\0\2\100\1\101\2\0"+
    "\1\102\1\64\25\0\1\70\12\0\1\72\41\0\1\103"+
    "\62\0\1\104\27\0\7\73\1\105\41\73\17\0\1\64"+
    "\52\0\1\64\47\0\1\64\2\0\2\64\45\0\1\64"+
    "\2\0\1\64\24\0\6\106\1\107\7\106\1\110\32\106"+
    "\22\0\1\111\26\0\6\73\1\112\1\105\41\73\6\106"+
    "\1\107\1\113\6\106\1\110\40\106\1\107\1\103\6\106"+
    "\1\110\40\106\1\107\1\113\6\106\1\110\2\106\1\114"+
    "\27\106\46\0\1\115\2\0\6\106\1\116\1\113\47\106"+
    "\1\107\1\113\6\106\1\110\3\106\1\117\26\106\47\0"+
    "\1\120\7\0\1\71\7\0\1\72\32\0\6\106\1\107"+
    "\1\113\6\106\1\110\27\106\1\121\2\106\23\0\1\122"+
    "\25\0\6\106\1\107\1\113\6\106\1\110\30\106\1\123"+
    "\1\106\50\0\1\124\6\106\1\107\1\113\6\106\1\110"+
    "\4\106\1\125\25\106\17\0\1\126\31\0\6\106\1\107"+
    "\1\113\6\106\1\110\31\106\1\127\23\0\1\130\25\0"+
    "\6\106\1\107\1\113\6\106\1\110\1\131\37\106\1\107"+
    "\1\113\6\106\1\110\4\106\1\132\25\106";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2255];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\1\0\1\11\2\1\1\11\3\1\7\11\1\1"+
    "\3\11\3\1\1\11\2\1\3\11\2\1\2\11\2\1"+
    "\1\11\1\1\2\0\1\11\2\0\1\11\2\0\4\1"+
    "\1\11\3\1\3\0\4\1\13\0\1\11\15\0\1\11"+
    "\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  private IElementType myTokenType;
  private int myState;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;



  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  @Override
  public IElementType getTokenType() {
    if (myTokenType == null) locateToken();
    return myTokenType;
  }

  @Override
  public final int getTokenStart(){
    if (myTokenType == null) locateToken();
    return zzStartRead;
  }

  @Override
  public final int getTokenEnd(){
    if (myTokenType == null) locateToken();
    return getTokenStart() + yylength();
  }

  @Override
  public void advance() {
    if (myTokenType == null) locateToken();
    myTokenType = null;
  }

  @Override
  public int getState() {
    if (myTokenType == null) locateToken();
    return myState;
  }

  @Override
  public void start(final CharSequence buffer, int startOffset, int endOffset, final int initialState) {
    reset(buffer, startOffset, endOffset, initialState);
    myTokenType = null;
  }

   @Override
   public CharSequence getBufferSequence() {
     return zzBuffer;
   }

   @Override
   public int getBufferEnd() {
     return zzEndRead;
   }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
    myTokenType = null;
  }

   protected void locateToken() {
     if (myTokenType != null) return;
     try {
       myState = yystate();
       myTokenType = advanceImpl();
     }
     catch (java.io.IOException e) { /*Can't happen*/ }
     catch (Error e) {
       // add lexer class name to the error
       final Error error = new Error(getClass().getName() + ": " + e.getMessage());
       error.setStackTrace(e.getStackTrace());
       throw error;
     }
   }

   /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advanceImpl() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { final int startPos = zzCurrentPosL;
		while(true) {
			char c = zzBufferL.charAt(zzCurrentPosL);
			if(c == ')' || c == ',' || zzEndRead == zzCurrentPosL) {
				break;
			}
			else {
				zzCurrentPosL ++;
			}
		}
		zzMarkedPos =  zzCurrentPosL;

		if(startPos != zzCurrentPosL) {
			return CssTokens.FUNCTION_ARGUMENT;
		}
          }
        case 30: break;
        case 28: 
          { yybegin(URI); yypushback(yylength());
          }
        case 31: break;
        case 24: 
          { yybegin(BODY); return CssTokens.RPAR;
          }
        case 32: break;
        case 6: 
          { return CssTokens.DOT;
          }
        case 33: break;
        case 4: 
          { return CssTokens.WHITE_SPACE;
          }
        case 34: break;
        case 5: 
          { return CssTokens.ASTERISK;
          }
        case 35: break;
        case 9: 
          { yybegin(BODY); return CssTokens.LBRACE;
          }
        case 36: break;
        case 27: 
          { return CssTokens.COLONCOLON;
          }
        case 37: break;
        case 26: 
          { return CssTokens.STRING;
          }
        case 38: break;
        case 22: 
          { yybegin(URI_BODY); return CssTokens.LPAR;
          }
        case 39: break;
        case 12: 
          { return CssTokens.RBRACKET;
          }
        case 40: break;
        case 14: 
          { return CssTokens.EQ;
          }
        case 41: break;
        case 7: 
          { return CssTokens.SHARP;
          }
        case 42: break;
        case 17: 
          { return CssTokens.NUMBER;
          }
        case 43: break;
        case 15: 
          { return CssTokens.GE;
          }
        case 44: break;
        case 19: 
          { return CssTokens.LBRACE;
          }
        case 45: break;
        case 18: 
          { return CssTokens.PERC;
          }
        case 46: break;
        case 8: 
          { return CssTokens.COMMA;
          }
        case 47: break;
        case 29: 
          { return CssTokens.IMPORTANT;
          }
        case 48: break;
        case 10: 
          { return CssTokens.RBRACE;
          }
        case 49: break;
        case 3: 
          { return CssTokens.BAD_CHARACTER;
          }
        case 50: break;
        case 16: 
          { return CssTokens.PLUS;
          }
        case 51: break;
        case 2: 
          { return CssTokens.FUNCTION_NAME;
          }
        case 52: break;
        case 1: 
          { return CssTokens.IDENTIFIER;
          }
        case 53: break;
        case 21: 
          { return CssTokens.SEMICOLON;
          }
        case 54: break;
        case 20: 
          { yybegin(YYINITIAL); return CssTokens.RBRACE;
          }
        case 55: break;
        case 11: 
          { return CssTokens.LBRACKET;
          }
        case 56: break;
        case 25: 
          { return CssTokens.BLOCK_COMMENT;
          }
        case 57: break;
        case 13: 
          { return CssTokens.COLON;
          }
        case 58: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
